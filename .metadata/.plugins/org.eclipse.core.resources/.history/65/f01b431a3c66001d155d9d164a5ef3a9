package com.kh.spring.member.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

/*
 * *Spring에서는 내부적으로 중앙 요청 처리 서블릿(DispatcherServlet)이 존재함
 * => 모든 요청은 DispatcherServlet에 의해 분배되는 구조
 * => 기존의 방식처럼 매 요청마다 직접적으로 Servlet을 만들 필요가 없음 (일반 클래스로 Controller 만들기)
 * 
 * *DispatcherServlet에 의해 MemberController 클래스의 어느 메소드가 호출
 * => MemberController 객체가 필요함
 * => Spring이 MemberController 객체를 만들 수 있게끔 bean 등록을 해 줘야 함!
 */

@Controller // Controller 타입의 어노테이션을 붙여 주면 빈 스캐닝을 통해 자동으로 bean으로 등록: 가독성 때문에 Component보다는 Controller를 권장
// @Component // 타입에 상관없이 bean으로 등록
public class MemberController {
	
	/*
	 * *Controller 클래스 내부에 메소드를 만들어서 요청에 대한 처리 내용을 작성
	 * => 접근제한자는 무조건 public으로 지정함
	 * => 메소드 상단에 url 매핑값을 지정해야 함
	 * => 메소드명은 의미를 부여해서 적당히 지어야 함
	 * => 매개변수는 있어도 되고, 없어도 됨 (단, 매개변수가 있는 경우 DispatcherServlet이 알아서 값을 전달해 줄 것)
	 * => *** 
	 * 
	 */
	
	/*
	@RequestMapping(value="login.me")
	public void loginMember() {
		System.out.println("잘 실행되나");
	}
	*/
	
	/*
	 * * Spring에서 파라미터 (요청 시 전달값)를 받는 방법
	 * 
	 * 1. HttpServletRequest 객체를 이용해서 전달받기 (기존의 jsp / servlet 방식)
	 * => 해당 메소드의 매개변수로 HttpServletRequest 객체를 전달받아야 함
	 * => 해당 메소드 호출 시 자동으로 Spring에 의해 객체가 생성돼서 매개변수로 주입해 줌
	 */
	/*
	@RequestMapping(value="login.me")
	public void loginMember(HttpServletRequest request) {
	// HttpServletRequest request는 스프링이 자동으로 생성해서 나에게 줌
		
		String userId = request.getParameter("userId");
		String userPwd = request.getParameter("userPwd");
		
		System.out.println("userId: " + userId);
		System.out.println("userPwd: " + userPwd);
	}
	*/
	
	/*
	 * 2. @RequestParam 어노테이션을 이용하는 방법
	 * => request.getParameter("키")로 밸류를 뽑아 오는 역할을 대신해 주는 어노테이션
	 * => 어노테이션의 value 속성으로 jsp에서 작성했던 name 속성값을 담으면 알아서 해당 매개변수로 요청 시 전달값을 받아 옴
	 */
	@RequestMapping(value="login.me")
	public void loginMember(@RequestParam(value="userId") String userId
						  , @RequestParam(value="userPwd") String userPwd) {
			
		
		
	}
	
	
	

}
