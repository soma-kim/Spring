<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 
		*root-context.xml 파일
		서버 구동과 동시에 읽혀지는 web.xml 파일에 의해 거쳐져서 바로 로딩되는 문서 (즉, 2번째로 읽혀지는 파일)
		서버 구동 직후에 바로 세팅해야 하는 내용들을 기술하는 공간
		예) DB 연동 설정, 트랜잭션 처리 설정, 내외부 모듈 설정, ...
		
		*root-context.xml 파일의 설정 방법
		beans 태그로 감싸져 있음 => bean 태그들을 하나하나씩 등록시켜 주면 됨
		bean: "도구" (자바 객체)
			    그동안은 우리가 자바 객체가 필요할 경우 일일이 new 구문을 이용해서 객체를 생성해 줬음
			    이제는 스프링이 알아서 객체를 생성해 주고 관리할 수 있게끔 어느 타입의 (자바 클래스) 어느 이름의 객체 (객체명)을 앞으로 사용할 건지 등록
	-->
	
	<!-- DB 연결 설정 3단계 -->
	<!-- 1단계: DB 연결을 위한 도구(bean)를 설정 -->
	<bean class="org.apache.commons.dbcp.BasicDataSource" id="dataSource" destroy-method="close">
		<!-- 어느 DB에 접속할 건지를 설정 -->
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="SPRING" />
		<property name="password" value="SPRING" />
	</bean>
	
	<!-- 
		해당 이 객체가 앞으로 필요할 때마다 내부적으로 Spring에 의해 이 코드가 실행됨
		BasicDataSource dataSource = new BasicDataSource(); // 내가 생성하는 것이 아니라 스프링이 기본 생성자로 자동 생성!
		dataSource.setDriverClassName("oracle.jdbc.driver.OracleDriver");
		dataSource.setUrl("jdbc:oracle:thin:@localhost:1521:xe");
		dataSource.setUserName("SPRING");
		dataSource.setPassword("SPRING");
	-->
	
	<!-- 2단계: MyBatis Spring에서 제공하는 SQL 명령어 실행을 위한 도구 (SqlSessionTemplate) 설정 -->
	<!-- 
		* 순수 MyBatis에서는 SqlSession 객체를 썼지만
		  Spring에서 MyBatis 연동 시에는 명령을 실행하기 위해 SqlSessionTemplate 객체를 씀!
		=> SqlSessionFactoryBean 객체를 통해 생성해야 함
	-->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
		<!-- MyBatis 설정 파일의 위치를 지정하여 설정값들을 가지고 오겠음 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- DB 연결을 위한 도구를 참조하겠음 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 
		해당 이 객체가 필요할 때마다 내부적으로 이 코드가 실행됨
		SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();
		sqlSeesionFactory.setConfigLocation("classpath:mybatis-config.xml");
		sqlSessionFactory.setDataSource();
	-->
	
	<!-- 3단계: MyBatis Spring에서 제공하는 SQL 명령어 실행을 위한 도구 (SqlSessionTemplate) 설정 2 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
		
	</bean>
	
	
	
	
	
</beans>
