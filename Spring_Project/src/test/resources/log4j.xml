<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">

<!--
	* log4j.xml 파일
	- log4j 프레임워크의 환경설정 파일
	
	1.log4j의 메시지 레벨
	=> log4j에서는 기록되는 메시지의 중요도를 매김 (6단계까지 존재하며 숫자가 높아질수록 더 중요함, 숫자가 낮아질수록 빈도가 높아짐)
	- 1단계: TRACE
			프로그램 내에서 발생하는 모든 사소한 작업들을 기록하는 수준(매우 시시콜콜하여 개발자가 사용하는 단계는 아님)
	- 2단계: DEBUG
			개발할 때 필요에 의해서 확인해야 할 부분에 대한 기록
			배포할 때에는 필요가 없는 수준(말 그대로 개발자가 개발 중에 오류를 찾기 위해 사용)
	- 3단계: INFO
			프로그램 입장에서 사용자에게 알려 줘야 할 정보에 대한 기록을 남기는 수준
			배포 후에도 필요한 수준
	- 4단계: WARN
			실행은 되지만 문제가 생길 소지가 있을 경우의 기록을 남기는 수준
	- 5단계: ERROR
			어떠한 문제에 의해 프로그램 자체가 실행되지 않는 경우의 기록을 남기는 수준
			(내가 만든 프로그램 자체의 오류)
	- 6단계: FATAL (치명적인)
			시스템에 치명적인 오류에 대한 기록을 남기는 수준
			(내가 만든 프로그램에는 오류가 없을 수 있으나 해당 프로그램을 돌리는 서버에 문제가 있어 내 요청을 받아쳐 주지 못함의 경우)
			=> 매우 중요해서 개발자가 쓸 수 없게 막아둠

	2. 설정 태그와 역할
	- logger 태그: 로깅을 수행하기 위한 도구(Logger에 대한 설정)
	- root 태그: 전반적인 로깅 설정(가장 하단에 존재하며, 상단의 logger 태그에서 설정하고 남은 것들에  대한 설정)
	- appender 태그: 로깅을 어디에 할 건지 설정하는 도구, 여러 개 지정 가능
	
	3. 사용 가능한 appender
	- ConsoleAppender : 콘솔에 로그를 출력하는 도구
	- FileAppender : 파일로 로그를 출력하는 도구
	- DailyRollingFileAppender : 날짜별로 파일에 로그를 출력하는 도구
	- RollingFileAppender : 용량별로 구분해서 파일에 로그를 출력하는 도구
	
-->
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- Appenders -->
	<!-- 기본 생성 appender : 콘솔에 출력하는 도구 -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<!-- 내부적으로 System.out과 같은 역할을 수행하겠음 -->
		<param name="Target" value="System.out" />
		<!--
			로그 메시지를 
			%-5p: %c            - %m%n
			INFO : com.kh.spring.TestClass - 난 info야
			형식으로 출력하겠음 (커스터마이징 가능)
			
			* 메시지 레이아웃
			- %p: 메시지 레벨(priority), -5는 해당 메시지 레벨을 5칸 왼쪽에다가 찍겠음
			- %c: 카테고리 정보(category), 로깅이 발생한 대상의 정보 (풀 클래스명)
			- %m: 메시지 내용(message), 실제 로깅 메시지 정보
			- %n: 개행 (\n을 의미함)
			- %d: 시간 정보, SimpleDateFormat 형식 그대로 사용({} 안에다가 커스터마이징 가능)
		-->
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m(%d{yyyy-MM-dd HH:mm:ss})%n" />
		</layout>
	</appender>
	
	<!-- 파일로 로그 출력 도구 (.xml) -->
	<appender name="xml" class="org.apache.log4j.FileAppender">
		<!-- 파일명(파일명만 쓴 경우 상대 경로에 의해 지금 내가 작업 중인 프로젝트 폴더 내부에 파일이 곧바로 생김 -->
		<param name="file" value="log.xml" />
		<!-- 이어쓰기를 하겠다. (true일 경우 이어쓰기, false일 경우 덮어쓰기 - 이어쓰기 권장 -->
		<param name="append" value="true" />
		<!-- xml 파일일 경우 log4j에서 기본적인 레이아웃 양식을 제공 -->
		<layout class="org.apache.log4j.xml.XMLLayout" />
	</appender>
	
	<!-- 파일로 로그 출력 도구 (.out): 내가 원하는 패턴에 따라 로그 출력 -->
	<appender name="out" class="org.apache.log4j.FileAppender">
		<param name="file" value="log.out" />
		<param name="append" value="true" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m(%d{yyyy-MM-dd HH:mm:ss})%n" />
		</layout>
	</appender>
	
	<!-- 날짜별로 파일이 바뀌는 도구 (.log) -->
	<appender name="daily" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="file" value="C:/mylog/daily" />
		<param name="append" value="true" />
		<!-- 파일명에 해당하는 날짜 패턴 -->
		<param name="DatePattern" value="'_'yyyy-MM-dd'.log'" />
		<!-- 파일 내용에 해당하는 패턴 -->
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m(%d{yyyy-MM-dd HH:mm:ss})%n" />
		</layout>
	</appender>
	
	<!-- Application Loggers -->
	<!-- 
		내가 만든 프로그램에 대한 로거 설정
		com.kh.spring 패키지 내에서의 모든 로깅은 info 수준부터 출력하겠다
	-->
	<logger name="com.kh.spring">
		<level value="info" /> <!-- level 태그에 명시된 수준 이상부터 로깅됨 -->
	</logger>
	
	<!-- 3rdparty Loggers -->
	<!--
		3rdparty: 제3자 (즉, spring framework)
		내가 직접 만든 것이 아닌 spring framework가 만든 프로그램에 대한 로깅을 어느 수준부터 할 것인지에 대한 설정 
	-->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>	
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- Root Logger -->
	<!-- 
		전반적인 로깅 설정
		위에서 설정된 내용 이외의 것들에 대한 모든 로깅 설정
	-->
	<root>
		<!--
			전체적으로 info 수준 이상만 로깅을 하겠다
			(개발 시에는 debug 수준으로 변경 후 디버깅 작업 진행, 배포 시에는 info로 바꾸기)
		-->
		<priority value="info" />
		<!-- 로깅된 내용을 콘솔에 출력하겠다 -->
		<appender-ref ref="console" />
		<appender-ref ref="daily" />
	</root>
	
</log4j:configuration>
